class Graph:
    def __init__(self, vertices):
        self.vertices = vertices
        self.graph = []

    def add_edge(self, u, v, w):
        self.graph.append((u, v, w))

    def kruskal(self):
        self.graph.sort(key=lambda edge: edge[2])  # Sort edges by weight
        parent = [i for i in range(self.vertices)]
        mst = []

        def find_set(vertex):
            if parent[vertex] == vertex:
                return vertex
            parent[vertex] = find_set(parent[vertex])
            return parent[vertex]

        def union_sets(root1, root2):
            parent[root2] = root1

        for edge in self.graph:
            u, v, w = edge
            root1 = find_set(u)
            root2 = find_set(v)

            if root1 != root2:
                mst.append((u, v, w))
                union_sets(root1, root2)

        return mst

# Example usage:
g = Graph(5)
g.add_edge(0, 1, 2)
g.add_edge(0, 2, 4)
g.add_edge(1, 2, 1)
g.add_edge(1, 3, 7)
g.add_edge(2, 3, 3)
g.add_edge(2, 4, 2)
g.add_edge(3, 4, 1)

minimum_spanning_tree = g.kruskal()
print("Minimum Spanning Tree:")
for edge in minimum_spanning_tree:
    print(f"Edge: {edge[0]} - {edge[1]}, Weight: {edge[2]}")
