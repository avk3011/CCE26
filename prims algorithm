import heapq

class Graph:
    def __init__(self):
        self.graph = {}

    def add_edge(self, u, v, weight):
        if u not in self.graph:
            self.graph[u] = []
        if v not in self.graph:
            self.graph[v] = []
        self.graph[u].append((v, weight))
        self.graph[v].append((u, weight))

    def prim(self, start):
        min_heap = [(0, start)]
        visited = set()
        mst = []

        while min_heap:
            current_weight, current_vertex = heapq.heappop(min_heap)

            if current_vertex not in visited:
                visited.add(current_vertex)
                mst.append((current_vertex, current_weight))

                for neighbor, weight in self.graph[current_vertex]:
                    if neighbor not in visited:
                        heapq.heappush(min_heap, (weight, neighbor))

        return mst

# Example usage:
g = Graph()
g.add_edge(0, 1, 2)
g.add_edge(0, 2, 4)
g.add_edge(1, 2, 1)
g.add_edge(1, 3, 7)
g.add_edge(2, 4, 3)
g.add_edge(3, 4, 1)

start_vertex = 0
minimum_spanning_tree = g.prim(start_vertex)
print("Minimum Spanning Tree:", minimum_spanning_tree)
